#include <ChainableLED.h>
#include <avr/interrupt.h>
#include <SPI.h>
#include <SD.h>
#include <BME280I2C.h>
#include <Wire.h>
#include <math.h>

#define NUM_LEDS 1
#define LEDPIN 7
#define interrupt 3
#define interrupt1 2
#define SERIAL_BAUD 9600

ChainableLED leds(7, 8, NUM_LEDS);

int randNumber = 0;
int Mode = 1;
int compteur = 0;
bool buttonState = true;

const int thresholdvalue = 10;  //The threshold for which the LED should turn on.
float Rsensor;                  //Resistance of sensor in K
const int chipSelect = 4;       // Carte SD par defaut sur D4

BME280I2C bme;


volatile bool bascule = false;
volatile long temps_appuie = 0;
volatile long temps_actuel = 0;

void setup() {
  digitalWrite(LEDPIN, HIGH);
  Serial.begin(9600);
  randomSeed(analogRead(0));  // Initialisation générateur de nombres aléatoires
  pinMode(LEDPIN, OUTPUT);    // Initialisation LED
  //pinMode(interrupt, INPUT_PULLUP); // Initialisation bouton
  digitalWrite(interrupt, LOW);
  interruption();
  digitalWrite(interrupt1, LOW);
  interruption1();
  leds.init();
  Serial.begin(SERIAL_BAUD);


  while (!Serial) {}  // Wait

  Wire.begin();

  while (!bme.begin()) {
    Serial.println("Could not find BME280 sensor!");
    delay(1000);
  }

  switch (bme.chipModel()) {
    case BME280::ChipModel_BME280:
      Serial.println("Found BME280 sensor! Success.");
      break;
    case BME280::ChipModel_BMP280:
      Serial.println("Found BMP280 sensor! No Humidity available.");
      break;
    default:
      Serial.println("Found UNKNOWN sensor! Error!");
  }
  while (!Serial)
    ;
  // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    Serial.println("Carte SD non insérée !");
    // don't do anything more:
    while (1){
    leds.setColorRGB(0, 255, 0, 0);
    delay(100);
    leds.setColorRGB(0, 0, 0, 255);
    delay(100);
    }
      
  }x
  Serial.println("card initialisée.");
  delay(1000);
  File dataFile = SD.open("datalog.txt", FILE_WRITE);
  dataFile.seek(0);
  // if the file is available, write to it:
  if (dataFile) {
    dataFile.println(F("Temperature;Humidite;pression;Luminosité"));
    dataFile.flush();
    dataFile.close();
  }
  // if the file isn't open, pop up an error:
  else {
    Serial.println("error opening datalog.txt");
    // … et un saut de ligne pour faire joli ;)
  }
}

void loop() {
  if (Mode == 1) {
    Serial.println("###############################################################");
    Serial.println("##################   MODE  1   NORMAL   #######################");
    Serial.println("###############################################################");
    Data(&Serial);
    leds.setColorRGB(0, 0, 255, 0);
    delay(500);
    delay(500);
    compteur = 0;
  }
  if (Mode == 2) {
    int compteur = 0;
    Serial.println("###############################################################");
    Serial.println("#################   MODE  2   CONFIGURATION     ###############");
    Serial.println("###############################################################");
    while (compteur != 10) {
      compteur = compteur + 1;
      leds.setColorRGB(0, 255, 255, 0);
      delay(500);
      delay(500);
    }
    Mode = 1;
    compteur = 0;
  }
  if (Mode == 3) {
    Serial.println("###############################################################");
    Serial.println("##################   MODE  3   ECOLO   ########################");
    Serial.println("###############################################################");
    Data(&Serial);
    leds.setColorRGB(0, 0, 0, 255);
    delay(500);

    delay(500);
    compteur = 0;
  }
}

void interruption() {
  attachInterrupt(digitalPinToInterrupt(3), basculer, RISING);
}
void interruption1() {
  attachInterrupt(digitalPinToInterrupt(2), basculer1, RISING);
}

void basculer() {
  temps_actuel = millis();
  if ((temps_actuel - temps_appuie) > 200) {
Mode = 2;
  }
  temps_appuie = temps_actuel;
}
void basculer1() {
  temps_actuel = millis();
  if ((temps_actuel - temps_appuie) > 200) {
Mode = 3;

  }

  temps_appuie = temps_actuel;
}
void Data(Stream* client) {
  float temp(NAN), hum(NAN), pres(NAN);

  BME280::TempUnit tempUnit(BME280::TempUnit_Celsius);
  BME280::PresUnit presUnit(BME280::PresUnit_Pa);
  int sensorValue = analogRead(0);
  Rsensor = (float)(1023 - sensorValue) * 10 / sensorValue;

  bme.read(pres, temp, hum, tempUnit, presUnit);

  client->print("Temp: ");
  client->print(temp);
  client->print(String(tempUnit == BME280::TempUnit_Celsius ? 'C' : 'F'));
  client->print("\t\tHumidity: ");
  client->print(hum);
  client->print("% RH");
  client->print("\t\tPressure: ");
  client->print(pres);
  client->print("Pa");
  client->print("\t\tLuminosite: ");
  client->println(Rsensor, DEC);  //show the light intensity on the serial monitor;
  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  File dataFile = SD.open("datalog.txt", FILE_WRITE);

  // if the file is available, write to it:
  if (dataFile) {

    dataFile.print(temp);
    dataFile.print(";");
    dataFile.print(hum);
    dataFile.print(";");
    dataFile.print(pres);
    dataFile.print(";");
    dataFile.print(Rsensor);
    dataFile.println();
    dataFile.close();
  }
  // if the file isn't open, pop up an error:
  else {
    Serial.println("error opening datalog.txt");
    // … et un saut de ligne pour faire joli ;)
  }

  delay(1000);
}